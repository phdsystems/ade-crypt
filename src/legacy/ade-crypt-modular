#!/bin/bash
# ADE-Crypt Modular - Main Dispatcher
# Version: 2.1.0 - Modular Architecture

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export MODULES_DIR="$SCRIPT_DIR/modules"
export LIB_DIR="$SCRIPT_DIR/lib"

# Source common library
source "$LIB_DIR/common.sh"

# Initialize
init_directories
load_config

# Show version
show_version() {
    echo "ADE-Crypt Modular v$VERSION"
    echo "Modular architecture with specialized components"
}

# Show help
show_help() {
    echo -e "${BOLD}${CYAN}ADE-Crypt Modular v$VERSION${NC}"
    echo ""
    echo "Usage: $(basename "$0") <module> <command> [options]"
    echo ""
    echo -e "${BOLD}Modules:${NC}"
    echo "  encrypt     File and directory encryption"
    echo "  decrypt     File and directory decryption"
    echo "  secrets     Secret management"
    echo "  keys        Key management"
    echo "  export      Export/import operations"
    echo "  backup      Backup and cloud sync"
    echo ""
    echo -e "${BOLD}Quick Commands:${NC}"
    echo "  $(basename "$0") encrypt file <filename>"
    echo "  $(basename "$0") decrypt file <filename>"
    echo "  $(basename "$0") secrets store <name>"
    echo "  $(basename "$0") secrets get <name>"
    echo "  $(basename "$0") keys generate"
    echo "  $(basename "$0") backup create"
    echo ""
    echo -e "${BOLD}Module Help:${NC}"
    echo "  $(basename "$0") <module> help"
    echo ""
    echo -e "${BOLD}Examples:${NC}"
    echo "  # Encrypt a file"
    echo "  $(basename "$0") encrypt file document.pdf"
    echo ""
    echo "  # Store a secret"
    echo "  $(basename "$0") secrets store api-key"
    echo ""
    echo "  # Export secrets as environment variables"
    echo "  $(basename "$0") export export env"
    echo ""
    echo "  # Create backup and push to cloud"
    echo "  $(basename "$0") backup create"
    echo "  $(basename "$0") backup push"
}

# Module dispatcher
dispatch_module() {
    local module="$1"
    shift
    
    case "$module" in
        encrypt|enc)
            "$MODULES_DIR/encrypt.sh" "$@"
            ;;
        decrypt|dec)
            "$MODULES_DIR/decrypt.sh" "$@"
            ;;
        secrets|secret|sec)
            "$MODULES_DIR/secrets.sh" "$@"
            ;;
        keys|key)
            "$MODULES_DIR/keys.sh" "$@"
            ;;
        export|import|share)
            "$MODULES_DIR/export.sh" "$@"
            ;;
        backup|sync)
            "$MODULES_DIR/backup.sh" "$@"
            ;;
        *)
            error_exit "Unknown module: $module"
            ;;
    esac
}

# Compatibility layer for old commands
handle_legacy_command() {
    local command="$1"
    shift
    
    case "$command" in
        encrypt)
            "$MODULES_DIR/encrypt.sh" file "$@"
            ;;
        decrypt)
            "$MODULES_DIR/decrypt.sh" file "$@"
            ;;
        store)
            "$MODULES_DIR/secrets.sh" store "$@"
            ;;
        get)
            "$MODULES_DIR/secrets.sh" get "$@"
            ;;
        list)
            "$MODULES_DIR/secrets.sh" list "$@"
            ;;
        generate-key)
            "$MODULES_DIR/keys.sh" generate "$@"
            ;;
        rotate-keys)
            "$MODULES_DIR/keys.sh" rotate
            ;;
        backup)
            "$MODULES_DIR/backup.sh" create "$@"
            ;;
        restore)
            "$MODULES_DIR/backup.sh" restore "$@"
            ;;
        *)
            return 1
            ;;
    esac
    return 0
}

# Check if all modules are executable
check_modules() {
    local missing=0
    
    for module in encrypt decrypt secrets keys export backup; do
        if [ ! -x "$MODULES_DIR/${module}.sh" ]; then
            chmod +x "$MODULES_DIR/${module}.sh" 2>/dev/null || {
                warning_msg "Module not executable: ${module}.sh"
                ((missing++))
            }
        fi
    done
    
    [ $missing -gt 0 ] && error_exit "Some modules are not properly installed"
}

# Main execution
main() {
    # Check modules on first run
    check_modules
    
    # Parse command
    local command="${1:-help}"
    
    case "$command" in
        help|--help|-h)
            show_help
            ;;
        version|--version|-v)
            show_version
            ;;
        encrypt|decrypt|secrets|keys|export|import|backup|sync)
            # Module command
            dispatch_module "$@"
            ;;
        store|get|list|generate-key|rotate-keys|restore)
            # Legacy command
            handle_legacy_command "$@"
            ;;
        *)
            # Try as legacy command first
            if ! handle_legacy_command "$@"; then
                error_exit "Unknown command: $command (try 'help')"
            fi
            ;;
    esac
}

# Run main
main "$@"